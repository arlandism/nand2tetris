// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[3..5],a=ram1,b=ram2,c=ram3,d=ram4,e=ram5,f=ram6,g=ram7,h=ram8);
    RAM8(in=in, out=out1, load=ram1, address=address[0..2]);
    RAM8(in=in, out=out2, load=ram2, address=address[0..2]);
    RAM8(in=in, out=out3, load=ram3, address=address[0..2]);
    RAM8(in=in, out=out4, load=ram4, address=address[0..2]);
    RAM8(in=in, out=out5, load=ram5, address=address[0..2]);
    RAM8(in=in, out=out6, load=ram6, address=address[0..2]);
    RAM8(in=in, out=out7, load=ram7, address=address[0..2]);
    RAM8(in=in, out=out8, load=ram8, address=address[0..2]);
    Mux8Way16(sel=address[3..5],a=out1,b=out2,c=out3,d=out4,e=out5,f=out6,g=out7,h=out8,out=out);
}
