// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // destination bits in a C instruction
    // instruction[3]  M[A]
    // instruction[4]  D
    // instruction[5]  A

    PARTS:
    Not(in=instruction[15],out=abitset); // most significant bit is 0
    And(a=abitset,b=instruction[5],out=adest); // most significant bit is 1 i.e. a C instruction AND A is a destination register in the instruction
    Or(a=abitset,b=adest,out=loadaregister);
    Mux16(a[0..14]=instruction[0..14],b=aluout,sel=instruction[15],out=aregisterinput);
    ARegister(in=aregisterinput,load=loadaregister,out=aregisterout,out[0..14]=addressM);

    Mux16(a=aregisterout,b=inM,sel=instruction[12],out=aorm); // should we use M[A] (inM) or A?
    ALU(zx=instruction[11],nx=instruction[10],zy=instruction[9],
        ny=instruction[8],f=instruction[7],no=instruction[6],
        x=dregisterout,y=aorm,out=aluout,out=outM,zr=eqzero,ng=lessthanzero);

        // need to figure out how to pass alu output to M
    DRegister(in=aluout,load=instruction[4],out=dregisterout);

    Equal3Way(a=instruction[0],b=instruction[1],c=instruction[2],out=jmpbitsmatch);
    Equal(a=instruction[0],b=false,out=falsebits);
    Equal(a=instruction[0],b=true,out=truebits);
    And(a=falsebits,b=jmpbitsmatch,out=nulljmp); // null
    And(a=truebits,b=jmpbitsmatch,out=unconditionaljmp); // JMP

    And(a=instruction[2],b=lessthanzero,out=lessthanzerojmp);
    And(a=instruction[1],b=eqzero,out=eqzerojump);
    Not(in=lessthanzero,out=greaterthanzero);
    And(a=instruction[0],b=greaterthanzero,out=greaterthanzerojmp);
    Or8Way(in[0]=lessthanzerojmp,in[1]=greaterthanzerojmp,in[2]=eqzerojump,
       in[3]=unconditionaljmp,in[4..7]=false,out=shouldjmpa);
    Mux(a=shouldjmpa,b=false,sel=nulljmp,out=shouldjmpb);


    And(a=instruction[15],b=shouldjmpb,out=shouldjmp);
    Not(in=shouldjmp,out=inc);

    And(a=instruction[3],b=instruction[15],out=writeM);

    PC(in=aregisterout,load=shouldjmp,reset=reset,inc=inc,out[0..14]=pc[0..14]);
}
